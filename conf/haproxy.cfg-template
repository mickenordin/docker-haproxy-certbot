global
    # log to sidecar rsyslog container
    # with syslog facility to accomplish rsyslog-alpine cfg
    log rsyslog syslog

    maxconn 20480
    ############# IMPORTANT #################################
    ## DO NOT SET CHROOT OTHERWISE YOU HAVE TO CHANGE THE  ##
    ## acme-http01-webroot.lua file                        ##
    # chroot /jail                                         ##
    #########################################################
    lua-load /etc/haproxy/acme-http01-webroot.lua
    #
    # SSL options
    ssl-default-bind-ciphers AES256+EECDH:AES256+EDH:!aNULL;
    tune.ssl.default-dh-param 4096

# DNS runt-time resolution on backend hosts
resolvers docker
    nameserver dns "127.0.0.11:53"

defaults
    log global
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option forwardfor
    option httplog

    # never fail on address resolution
    default-server init-addr last,libc,none

frontend http
    bind *:80
    mode http
    acl url_acme_http01 path_beg /.well-known/acme-challenge/
    http-request use-service lua.acme-http01 if METH_GET url_acme_http01
    redirect scheme https code 301 if !{ ssl_fc }

frontend https
    bind *:443 ssl crt /etc/haproxy/certs/ no-sslv3 no-tls-tickets no-tlsv10 no-tlsv11
    http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"
    default_backend be_nextcloud

# Specifies listening socket for accepting client connections using the default 
# REDIS TCP timeout and backend be_redis TCP health check.
frontend redis
    bind *:6379
    mode tcp
    option tcplog
    default_backend be_redis

# Specifies the backend Redis proxy server TCP health settings 
# Ensure it only forward incoming connections to reach a master.
backend be_redis
    mode tcp
    option log-health-checks
    option tcp-check
    tcp-check connect
    tcp-check send AUTH\ ${LEADER_PASSWORD}\r\n
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    server cache-kano1.pilot.drive.sunet.dev cache-kano1.pilot.drive.sunet.dev:6379 check inter 1s
    server cache-kano2.pilot.drive.sunet.dev cache-kano2.pilot.drive.sunet.dev:6379 check inter 1s
    server cache-kano3.pilot.drive.sunet.dev cache-kano3.pilot.drive.sunet.dev:6379 check inter 1s


backend be_nextcloud
    mode http
    # Make sure to get correct host header
    http-send-name-header Host
    # These should be redirected according to nextcloud docs
    acl url_discovery path /.well-known/caldav /.well-known/carddav
    http-request redirect location /remote.php/dav/ code 301 if url_discovery
    # LB with sticky sessions based on cookie
    balance leastconn
    option persist
    cookie SERVERID insert indirect nocache

    # Set up healtchecks
    option log-health-checks
    option httpchk
    http-check connect ssl
    http-check send meth HEAD uri /
    http-check expect status 302

    # the actual backends
    server node-kano1.pilot.drive.sunet.dev node-kano1.pilot.drive.sunet.dev:443 check resolvers docker resolve-prefer ipv4 cookie node-kano1.pilot.drive.sunet.dev ssl verify none
    server node-kano2.pilot.drive.sunet.dev node-kano2.pilot.drive.sunet.dev:443 check resolvers docker resolve-prefer ipv4 cookie node-kano2.pilot.drive.sunet.dev ssl verify none
    http-response set-header Strict-Transport-Security max-age=16000000;\ includeSubDomains;\ preload;
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
